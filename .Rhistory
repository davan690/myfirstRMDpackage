dev_file <- fusen::add_dev_history(open = TRUE)
# Describe your package
fusen::fill_description(
pkg = here::here(),
fields = list(
Title = "Create a dynamic CV or landing page",
Description = "Use Rmarkdown First method to build your package. Start your package with documentation. Everything can be set from a Rmarkdown file in your project.",
`Authors@R` = c(
person("Anthony", "Davidson", email = "anthony.davidson@canberra.edu.au", role = c("aut", "cre"), comment = c(ORCID = "0000-0003-1476-3861")),
person(given = "DynamicCV", role = "cph")
)
)
)
# Define License with use_*_license()
usethis::use_mit_license("Anthony Davidson")
# Run all in the console directly
# Create "inst/" directory
dir.create(here::here("inst"))
# Example dataset
# file.copy(system.file("nyc_squirrels_sample.csv", package = "fusen"), here::here("inst"))
# Make your dataset file available to the current Rmd
pkgload::load_all(path = here::here(), export_all = FALSE)
# You will be able to read your example data file in each of your function examples and tests as follows
# datafile <- system.file("nyc_squirrels_sample.csv", package = "myfirstRMDpackage")
# nyc_squirrels <- read.csv(datafile)
#' My median
#'
#' @param x Vector of Numeric values
#' @inheritParams stats::median
#'
#' @return
#' Median of vector x
#' @export
#'
#' @examples
my_median <- function(x, na.rm = TRUE) {
if (!is.numeric(x)) {stop("x should be numeric")}
stats::median(x, na.rm = na.rm)
}
my_median(1:12)
test_that("my_median works properly and show error if needed", {
expect_true(my_median(1:12) == 6.5)
expect_error(my_median("text"))
})
# Run but keep eval=FALSE to avoid infinite loop
# Execute in the console directly
fusen::inflate(rmd = "dev/dev_history.Rmd")
`rm(list = c("my_median"))
rm(list = c("my_median"))
fusen::inflate()
rm -Rf C:/Users/s435389/AppData/Local/Temp/Rtmp04YARC/Rd2pdf41ec146b421d
rm -Rf "C:/Users/s435389/AppData/Local/Temp/Rtmp04YARC/Rd2pdf41ec146b421d"
library(testthat)
library(myfirstRMDpackage)
test_check("myfirstRMDpackage")
rlang::last_error()
rlang::last_trace()
library(myfirstRMDpackage)
library(myfirstRMDpackage)
# Run but keep eval=FALSE to avoid infinite loop
# Execute in the console directly
fusen::inflate(rmd = "dev/dev_history.Rmd", pkg = "C://Code/myfirstRMDpackage/")
# Run but keep eval=FALSE to avoid infinite loop
# Execute in the console directly
fusen::inflate(rmd = "C://Code/myfirstRMDpackage/dev/dev_history.Rmd", pkg = "C://Code/myfirstRMDpackage/")
library(myfirstRMDpackage, lib.loc = "C://Code/myfirstRMDpackage/")
library(myfirstRMDpackage, lib.loc = "C://Code/myfirstRMDpackage/")
library(myfirstRMDpackage, lib.loc = "C://Code/myfirstRMDpackage/")
source('C:/Code/myfirstRMDpackage/tests/testthat.R')
test_dir()
test_dir("C://Code/myfirstRMDpackage/")
test_dir("C://Code/myfirstRMDpackage/tests/testthat/")
test_check("myfirstRMDpackage", test_dir("C://Code/myfirstRMDpackage/tests/testthat/"))
reporter <- MultiReporter$new(list(
FailReporter$new(),
TapReporter$new()
))
test_check("mypackage", reporter = reporter)
test_check("myfirstRMDpackage", reporter = reporter)
reporter <- MultiReporter$new(list(
FailReporter$new(),
TapReporter$new()
))
test_check("myfirstRMDpackage", reporter = reporter)
test_that('working directory is set',{
setwd(here())
# test code here
})
test_that("my_median works properly and show error if needed", {
expect_true(my_other_median(1:12) == 6.5)
expect_error(my_other_median("text"))
})
library(here)
library(testthat)
library(here)
# Run all in the console directly
# Create "inst/" directory
# dir.create(here::here("inst"))
# Example dataset
# file.copy(system.file("nyc_squirrels_sample.csv", package = "fusen"), here::here("inst"))
# Make your dataset file available to the current Rmd
pkgload::load_all(path = here::here(), export_all = FALSE)
test_that("my_median works properly and show error if needed", {
expect_true(my_median(1:12) == 6.5)
expect_error(my_median("text"))
})
my_other_median(1:12)
fusen::inflate(rmd = "C://Code/myfirstRMDpackage/dev/dev_history.Rmd")
fusen::inflate(rmd = "C://Code/myfirstRMDpackage/dev/dev_history.Rmd")
